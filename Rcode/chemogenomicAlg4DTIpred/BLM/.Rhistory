print(paste0(meshid1, "    ", meshid2, "    ", sim))
id1[idx]<-meshid1
id2[idx]<-meshid2
w[idx]<-sim
}
}
}
print(idx)
net<-data.frame(id1,w,id2)
write.table(net, "MeSHID_Net.txt", row.names = FALSE, quote = FALSE, sep = "\t")
wd<-"/Users/admin/Data/GWAS/CAUSALdb/"
setwd(wd)
library('MeSHSim')
# Anatomy [A]
# Organisms [B]
# Diseases [C]
# Chemicals and Drugs [D]
# Analytical, Diagnostic and Therapeutic Techniques and Equipment [E]
# Psychiatry and Psychology [F]
# Biological Sciences [G]
# Physical Sciences [H]
# Anthropology, Education, Sociology and Social Phenomena [I]
# Technology and Food and Beverages [J]
# Humanities [K]
# Information Science [L]
# Persons [M]
# Health Care [N]
# Publication Characteristics [V]
# Geographic Locations [Z]
headingSim("Diabetes Mellitus, Type 2", "Body Weight", method="Resnik", frame="node")
metaAll<-read.delim('causaldb_meta_info_v1.txt',sep='\t',check.names = FALSE, header=TRUE)
MeSHTerm2IDMap <- list()
for(i in 1:nrow(metaAll)){
key<-as.character(metaAll$MeSH_term[i])
value<-as.character(metaAll$MeSH_ID[i])
print(paste0(key,"   ", value))
MeSHTerm2IDMap[[key]]<-value
}
# for(i in 1:nrow(metaAll)){
#     key[i]<-as.character(metaAll$MeSH_term[i])
#     value[i]<-as.character(metaAll$MeSH_ID[i])
#   }
# MeSHTerm2IDMap<-setNames(as.list(value), key)
meshAll <- unique(metaAll$MeSH_term)
remove <- c ("Glycated Hemoglobin A",
"Sleepiness","Neuroticism",
"Eicosapentaenoic acid",
"Autism Spectrum Disorder",
"Arachidonic acid",
"CD3 Complex",
"Tumor Necrosis Factor Receptor Superfamily, Member 7",
"CD56 Antigen",
"CD24 Antigen",
"Platelet",
"Platelet",
"Ferritin",
"Hemoglobin",
"Gestational Weight Gain",
"Rotator Cuff Injuries",
"Eyelid",
"Fibromatosis, Plantar",
"Breast Carcinoma In Situ",
"Walking Speed",
"Varicella Zoster Virus Infection",
"Essential Hypertension",
"Travel-Related Illness",
"Diverticular Diseases",
"Diet, Diabetic",
"Family Characteristic",
"Memory and Learning Tests",
"Cell Phone Use",
"Aggressive Driving",
"Screen Time",
"Edible Grain",
"Dietary Sugars",
"Diagnostic Screening Programs",
"Birth Setting")
meshAll <-meshAll [! meshAll %in% remove]
idx=0;
nTerm<-length(meshAll)
id1<-NULL
id2<-NULL
w<-NULL
# nTerm=100
for(i in 1:(nTerm-1)){
meshid1<-meshAll[i]
for(j in (i+1):nTerm){
meshid2<-meshAll[j]
#print(paste0(meshid1, "    ", meshid2, "    ", sim))
#print(paste0(meshid1, "    ", meshid2))
sim<-headingSim(meshid1, meshid2, method="Wang", frame="node")
#print(sim)
if(sim>0){
idx=idx+1
print(paste0(meshid1, "    ", meshid2, "    ", sim))
id1[idx]<-as.character(MeSHTerm2IDMap[[meshid1]])
id2[idx]<-as.character(MeSHTerm2IDMap[[meshid2]])
w[idx]<-sim
}
}
}
print(idx)
net<-data.frame(id1,w,id2)
write.table(net, "MeSHID_Net.txt", row.names = FALSE, quote = FALSE, sep = "\t")
wd<-"/Users/admin/Data/GWAS/CAUSALdb/"
setwd(wd)
library('MeSHSim')
# Anatomy [A]
# Organisms [B]
# Diseases [C]
# Chemicals and Drugs [D]
# Analytical, Diagnostic and Therapeutic Techniques and Equipment [E]
# Psychiatry and Psychology [F]
# Biological Sciences [G]
# Physical Sciences [H]
# Anthropology, Education, Sociology and Social Phenomena [I]
# Technology and Food and Beverages [J]
# Humanities [K]
# Information Science [L]
# Persons [M]
# Health Care [N]
# Publication Characteristics [V]
# Geographic Locations [Z]
headingSim("Diabetes Mellitus, Type 2", "Body Weight", method="Resnik", frame="node")
metaAll<-read.delim('causaldb_meta_info_v1.txt',sep='\t',check.names = FALSE, header=TRUE)
MeSHTerm2IDMap <- list()
for(i in 1:nrow(metaAll)){
key<-as.character(metaAll$MeSH_term[i])
value<-as.character(metaAll$MeSH_ID[i])
print(paste0(key,"   ", value))
MeSHTerm2IDMap[[key]]<-value
}
# for(i in 1:nrow(metaAll)){
#     key[i]<-as.character(metaAll$MeSH_term[i])
#     value[i]<-as.character(metaAll$MeSH_ID[i])
#   }
# MeSHTerm2IDMap<-setNames(as.list(value), key)
meshAll <- unique(metaAll$MeSH_term)
remove <- c ("Glycated Hemoglobin A",
"Sleepiness","Neuroticism",
"Eicosapentaenoic acid",
"Autism Spectrum Disorder",
"Arachidonic acid",
"CD3 Complex",
"Tumor Necrosis Factor Receptor Superfamily, Member 7",
"CD56 Antigen",
"CD24 Antigen",
"Platelet",
"Platelet",
"Ferritin",
"Hemoglobin",
"Gestational Weight Gain",
"Rotator Cuff Injuries",
"Eyelid",
"Fibromatosis, Plantar",
"Breast Carcinoma In Situ",
"Walking Speed",
"Varicella Zoster Virus Infection",
"Essential Hypertension",
"Travel-Related Illness",
"Diverticular Diseases",
"Diet, Diabetic",
"Family Characteristic",
"Memory and Learning Tests",
"Cell Phone Use",
"Aggressive Driving",
"Screen Time",
"Edible Grain",
"Dietary Sugars",
"Diagnostic Screening Programs",
"Birth Setting")
meshAll <-meshAll [! meshAll %in% remove]
idx=0;
nTerm<-length(meshAll)
id1<-NULL
id2<-NULL
w<-NULL
# nTerm=100
for(i in 1:(nTerm-1)){
meshid1<-meshAll[i]
for(j in (i+1):nTerm){
meshid2<-meshAll[j]
#print(paste0(meshid1, "    ", meshid2, "    ", sim))
#print(paste0(meshid1, "    ", meshid2))
sim<-headingSim(meshid1, meshid2, method="Resnik", frame="node")
#print(sim)
if(sim>0){
idx=idx+1
print(paste0(meshid1, "    ", meshid2, "    ", sim))
id1[idx]<-as.character(MeSHTerm2IDMap[[meshid1]])
id2[idx]<-as.character(MeSHTerm2IDMap[[meshid2]])
w[idx]<-sim
}
}
}
print(idx)
net<-data.frame(id1,w,id2)
write.table(net, "MeSHID_Net.txt", row.names = FALSE, quote = FALSE, sep = "\t")
nTerm
meshAll
wd<-"/Users/admin/Data/GWAS/CAUSALdb/"
setwd(wd)
metaAll<-read.delim('causaldb_meta_info_v1.txt',sep='\t',check.names = FALSE, header=TRUE)
popAll <- unique(metaAll$Population)
for(i in 1: length(popAll)){
pop <- popAll[i]
print(pop)
idx <- which(metaAll$Population==pop)
meta <- metaAll[idx,]
dim(meta)
MeSHIDSet<-unique(meta[,"MeSH_ID"])
folder = "/Users/admin/Data/GWAS/CAUSALdb/credible_set/"
fileSNPbyPop<-paste0(wd,pop,"_Assoc.txt")
print(fileSNPbyPop)
fileConn<-base::file(fileSNPbyPop,"w")
for(mid in 1:length(MeSHIDSet)){
meshid<-MeSHIDSet[mid]
meshterm<-meta[which(meta$MeSH_ID==meshid),3][1]#"MeSH_Term"
print(paste0(meshid,"   ",meshterm))
metabyMeSHID<-meta[which(meta$MeSH_ID==meshid),]
rsByPop<-c()
for(j in 1:nrow(metabyMeSHID)){
id<-metabyMeSHID$ID[j]
file<-paste0(folder,id,"_total_credible_set.txt")
sum<-read.delim(file,sep='\t',check.names = FALSE, header=TRUE)
rsByPop<-c(rsByPop,paste0("rs",sum$rsID))
}
rsByPopUnique<-unique(rsByPop)
assocrs<-""
for(rsid in rsByPopUnique){
assocrs<-paste0(assocrs,rsid,", ")
}
assocrs<-substr(assocrs,1, nchar(assocrs)-2)#Remove ", "
assoc<-paste0(meshid,"\t",meshterm,"\t",assocrs)
writeLines(assoc, fileConn)
}
close(fileConn)
}
##Neu loi lien quan den gfortran khi bien dich file *.cpp.
##Download va cai dat gfortran tai http://gcc.gnu.org/wiki/GFortranBinaries#MacOS
setwd("/Users/admin/Tools/DTI/chemogenomicAlg4DTIpred/BLM/")
rm(list = ls())
## current data set name
db <- "gwas"#en/ic/gpcr/ic/nr/dr
switch (db,
en = {
cat("en data\n")
flush.console()
sd <- read.table("e_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("e_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("e_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
ic = {
cat("ic data\n")
flush.console()
sd <- read.table("ic_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("ic_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("ic_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
gpcr = {
cat("gpcr data\n")
flush.console()
sd <- read.table("gpcr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("gpcr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("gpcr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
nr = {
cat("nr data\n")
flush.console()
sd <- read.table("nr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("nr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("nr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
dr = {
cat("dr data\n")
flush.console()
sd <- read.table("DrugSim-Fdataset.txt")
sd <- as.matrix(sd)
st <- read.table("DiseaseSim-Fdataset.txt")
st <- as.matrix(st)
Y <- read.table("DiDrA-Fdataset.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
gwas = {
cat("gwas data\n")
flush.console()
sd <- read.table("/Users/admin/Data/GWAS/CAUSALdb/LD=0.2/MeSHIDSimMat.txt")
sd <- as.matrix(sd)
st <- read.table("/Users/admin/Data/GWAS/CAUSALdb/LD=0.2/SNPSimMat.txt")
st <- as.matrix(st)
Y <- read.table("/Users/admin/Data/GWAS/CAUSALdb/LD=0.2/SNPMeSHIDMat.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
stop("db should be one of the follows:
{en, ic, gpcr, nr}\n")
)
getwd()
## load required packages
pkgs <- c(
"matrixcalc",
"data.table",
"Rcpp",
"ROCR",
"Bolstad2",
"MESS",
"nloptr",
"cluster",
"kernlab"
)
rPkgs <- lapply(pkgs, require, character.only = TRUE)
## source required R files
rSourceNames <- c(
"doCVPositiveOnly.R",
"doCVPositiveOnly3.R",
"evalMetrics.R",
"getCvIndex.R",
"blm.R"
)
rSN <- lapply(rSourceNames, source, verbose = FALSE)
## sourceCPP required C++ files
cppSourceNames <- c("fastKF.cpp",
"fastKgipMat.cpp",
"log1pexp.cpp",
"sigmoid.cpp",
"fastSolve.cpp")
cppSN <- lapply(cppSourceNames, sourceCpp, verbose = FALSE)
## convert to kernel
isKernel <- TRUE
if (isKernel) {
if (!isSymmetric(sd)) {
sd <- (sd + t(sd)) / 2
}
epsilon <- 0.1
while (!is.positive.semi.definite(sd)) {
sd <- sd + epsilon * diag(nrow(sd))
}
if (!isSymmetric(st)) {
st <- (st + t(st)) / 2
}
epsilon <- 0.1
while (!is.positive.semi.definite(st)) {
st <- st + epsilon * diag(nrow(st))
}
}
Y <- t(Y)
tmp <- sd
sd <- st
st <- tmp
Y[1:3, 1:3]
## do cross-validation
kfold <- 5
numSplit <- 5
## DT-Hybrid method
savedFolds <- doCVPositiveOnly3(Y, kfold = kfold, numSplit = numSplit)
install.packages('matrixcalc')
install.packages('Bolstad2')
install.packages('MESS')
##Neu loi lien quan den gfortran khi bien dich file *.cpp.
##Download va cai dat gfortran tai http://gcc.gnu.org/wiki/GFortranBinaries#MacOS
setwd("/Users/admin/Tools/DTI/chemogenomicAlg4DTIpred/BLM/")
rm(list = ls())
## current data set name
db <- "gwas"#en/ic/gpcr/ic/nr/dr
switch (db,
en = {
cat("en data\n")
flush.console()
sd <- read.table("e_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("e_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("e_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
ic = {
cat("ic data\n")
flush.console()
sd <- read.table("ic_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("ic_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("ic_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
gpcr = {
cat("gpcr data\n")
flush.console()
sd <- read.table("gpcr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("gpcr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("gpcr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
nr = {
cat("nr data\n")
flush.console()
sd <- read.table("nr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("nr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("nr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
dr = {
cat("dr data\n")
flush.console()
sd <- read.table("DrugSim-Fdataset.txt")
sd <- as.matrix(sd)
st <- read.table("DiseaseSim-Fdataset.txt")
st <- as.matrix(st)
Y <- read.table("DiDrA-Fdataset.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
gwas = {
cat("gwas data\n")
flush.console()
sd <- read.table("/Users/admin/Data/GWAS/CAUSALdb/LD=0.2/MeSHIDSimMat.txt")
sd <- as.matrix(sd)
st <- read.table("/Users/admin/Data/GWAS/CAUSALdb/LD=0.2/SNPSimMat.txt")
st <- as.matrix(st)
Y <- read.table("/Users/admin/Data/GWAS/CAUSALdb/LD=0.2/SNPMeSHIDMat.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
stop("db should be one of the follows:
{en, ic, gpcr, nr}\n")
)
getwd()
## load required packages
pkgs <- c(
"matrixcalc",
"data.table",
"Rcpp",
"ROCR",
"Bolstad2",
"MESS",
"nloptr",
"cluster",
"kernlab"
)
rPkgs <- lapply(pkgs, require, character.only = TRUE)
## source required R files
rSourceNames <- c(
"doCVPositiveOnly.R",
"doCVPositiveOnly3.R",
"evalMetrics.R",
"getCvIndex.R",
"blm.R"
)
rSN <- lapply(rSourceNames, source, verbose = FALSE)
## sourceCPP required C++ files
cppSourceNames <- c("fastKF.cpp",
"fastKgipMat.cpp",
"log1pexp.cpp",
"sigmoid.cpp",
"fastSolve.cpp")
cppSN <- lapply(cppSourceNames, sourceCpp, verbose = FALSE)
## convert to kernel
isKernel <- TRUE
if (isKernel) {
if (!isSymmetric(sd)) {
sd <- (sd + t(sd)) / 2
}
epsilon <- 0.1
while (!is.positive.semi.definite(sd)) {
sd <- sd + epsilon * diag(nrow(sd))
}
if (!isSymmetric(st)) {
st <- (st + t(st)) / 2
}
epsilon <- 0.1
while (!is.positive.semi.definite(st)) {
st <- st + epsilon * diag(nrow(st))
}
}
Y <- t(Y)
tmp <- sd
sd <- st
st <- tmp
Y[1:3, 1:3]
## do cross-validation
kfold <- 3
numSplit <- 3
## DT-Hybrid method
savedFolds <- doCVPositiveOnly3(Y, kfold = kfold, numSplit = numSplit)
dim(Y)
dim(sd)
dim(st)
