stringsAsFactors=FALSE)
myedges <- data.frame(source=c("node 0","node 0","node 0","node 2"),
target=c("node 1","node 2","node 3","node 3"),
interaction=c("inhibits","interacts","activates","interacts"),  # optional
weight=c(5,3,5,9), # optional
stringsAsFactors=FALSE)
network.name = "myNetwork"
collection.name = "myCollection"
# create network
network.suid <- createNetwork(mynodes,myedges,network.name,collection.name)
# create style with node attribute-fill mappings and some defaults
style.name = "myStyle"
defaults <- list(NODE_SHAPE="diamond",
NODE_SIZE=30,
EDGE_TRANSPARENCY=120,
NODE_LABEL_POSITION="W,E,c,0.00,0.00")
nodeLabels <- mapVisualProperty('node label','id','p')
nodeFills <- mapVisualProperty('node fill color','group','d',c("A","B"), c("#FF9900","#66AAAA"))
arrowShapes <- mapVisualProperty('Edge Target Arrow Shape','interaction','d',c("activates","inhibits","interacts"),c("Arrow","T","None"))
edgeWidth <- mapVisualProperty('edge width','weight','p')
#create style
createStyle(style.name, defaults, list(nodeLabels,nodeFills,arrowShapes,edgeWidth))
applyStyle(style.name)
#check out the marquee style!
applyStyle('Marquee')
# list of available visual properties
?mapVisualProperty
############################################
#### Browse Available Commands and Arguments
############################################
# r2cytoscape helper functions
help(package=r2cytoscape)
# Open swagger docs for live instances of CyREST API and CyREST-supported commands:
openCySwagger()  # CyREST API
openCySwagger("commands")  # CyREST Commands API
#List available commands and arguments in R. Use "help" to list top level:
commandHelp("help")
#List **network** commands. Note that "help" is optional:
commandHelp("help network")
#List arguments for the **network select** command:
commandHelp("help network select")
#### Syntax reference and helper functions
# Syntax examples. Do not run this chunk of code.
### CyREST direct
# queryURL = paste(base.url,'arg1','arg2','arg3',sep='/') # refer to Swagger for args
# res = GET(queryURL) # GET result object
# res.html = htmlParse(rawToChar(res$content), asText=TRUE)  # parse content as HTML
### Commands via CyREST
# queryURL = command2query('commands and args') # refer to Swagger or Tools>Command Line Dialog in Cytoscape
# res = GET(queryURL) # GET result object
# res.html = htmlParse(rawToChar(res$content), asText=TRUE)  # parse content as HTML
## ...using helper function
# res.list = commandRun('commands and args') # parse list from content HTML
#### Ok, now you are ready to work with some real data!  See advanced tutorials...
setwd("/Users/admin/Tools/DTI/chemogenomicAlg4DTIpred-master/BLM/")
rm(list = ls())
## current data set name
db <- "en"#en/ic/GPCR/ic/nr
switch (db,
en = {
cat("en data\n")
flush.console()
sd <- read.table("e_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("e_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("e_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
ic = {
cat("ic data\n")
flush.console()
sd <- read.table("ic_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("ic_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("ic_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
gpcr = {
cat("gpcr data\n")
flush.console()
sd <- read.table("gpcr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("gpcr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("gpcr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
nr = {
cat("nr data\n")
flush.console()
sd <- read.table("nr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("nr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("nr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
stop("db should be one of the follows:
{en, ic, gpcr, nr}\n")
)
getwd()
## load required packages
pkgs <- c(
"matrixcalc",
"data.table",
"Rcpp",
"ROCR",
"Bolstad2",
"MESS",
"nloptr",
"cluster",
"kernlab"
)
rPkgs <- lapply(pkgs, require, character.only = TRUE)
## source required R files
rSourceNames <- c(
"doCVPositiveOnly.R",
"doCVPositiveOnly3.R",
"evalMetrics.R",
"getCvIndex.R",
"blm.R"
)
rSN <- lapply(rSourceNames, source, verbose = FALSE)
## sourceCPP required C++ files
cppSourceNames <- c("fastKF.cpp",
"fastKgipMat.cpp",
"log1pexp.cpp",
"sigmoid.cpp",
"fastSolve.cpp")
cppSN <- lapply(cppSourceNames, sourceCpp, verbose = FALSE)
## convert to kernel
isKernel <- TRUE
if (isKernel) {
if (!isSymmetric(sd)) {
sd <- (sd + t(sd)) / 2
}
epsilon <- 0.1
while (!is.positive.semi.definite(sd)) {
sd <- sd + epsilon * diag(nrow(sd))
}
if (!isSymmetric(st)) {
st <- (st + t(st)) / 2
}
epsilon <- 0.1
while (!is.positive.semi.definite(st)) {
st <- st + epsilon * diag(nrow(st))
}
}
Y <- t(Y)
tmp <- sd
sd <- st
st <- tmp
Y[1:3, 1:3]
## do cross-validation
kfold <- 10
numSplit <- 5
## DT-Hybrid method
savedFolds <- doCVPositiveOnly3(Y, kfold = kfold, numSplit = numSplit)
## saving results
resMetrics <- matrix(NA, nrow = kfold, ncol = 1)
colnames(resMetrics) <- c("MPR")
resMetrics <- as.data.frame(resMetrics)
finalResult <- vector("list", length = numSplit)
## parameters
cc <- 1
## main loop
for (i in 1:numSplit) {
for (j in 1:kfold) {
cat("numSplit:", i, "/", numSplit, ";", "kfold:", j,
"/", kfold, "\n")
flush.console()
## training set with the test set links removed
Yfold <- savedFolds[[i]][[j]][[6]]
Kd <- sd
Kt <- st
## extract test set
testSet <- savedFolds[[i]][[j]][[1]]
knownDrugIndex <- savedFolds[[i]][[j]][[4]]
knownTargetIndex <- savedFolds[[i]][[j]][[5]]
testIndexRow <- savedFolds[[i]][[j]][[2]]
testIndexCol <- savedFolds[[i]][[j]][[3]]
Ypred <- blm(Yfold = Yfold, Kd = Kd, Kt = Kt, cc = cc)
## result
result2 <- evalMetrics(Ypred = Ypred,testSet = testSet)
resMetrics[j, ] <- result2
}
finalResult[[i]] <- resMetrics
}
# combine result
resCom <- as.data.frame(data.table::rbindlist(finalResult))
resMean <- colMeans(resCom)
se <- sqrt(var(resCom[, 1]) / length(resCom[, 1]))
cat("BLM:", "MPR =", round(resMean, 3), "+\\-", round(se, 3),  "\n")
flush.console()
savedName <- paste0(db, "_BLM.RData")
save.image(savedName)
setwd("/Users/admin/Tools/DTI/chemogenomicAlg4DTIpred-master/KronRLSMKL/")
rm(list = ls())
## current data set name
db <- "en"
switch (db,
en = {
cat("en data\n")
flush.console()
sd <- read.table("e_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("e_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("e_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
ic = {
cat("ic data\n")
flush.console()
sd <- read.table("ic_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("ic_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("ic_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
gpcr = {
cat("gpcr data\n")
flush.console()
sd <- read.table("gpcr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("gpcr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("gpcr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
nr = {
cat("nr data\n")
flush.console()
sd <- read.table("nr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("nr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("nr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
stop("db should be one of the follows:
{en, ic, gpcr, nr}\n")
)
## load required packages
pkgs <- c("matrixcalc", "data.table", "Rcpp", "ROCR",
"Bolstad2", "MESS", "nloptr")
rPkgs <- lapply(pkgs, require, character.only = TRUE)
## source required R files
rSourceNames <- c(
"doCVPositiveOnly.R",
"doCVPositiveOnly3.R",
"evalMetrics.R",
"combineKernels.R",
"eigDecomp.R",
"kronRls.R",
"kronRlsC.R",
"kronRlsMKL.R",
"optWeights.R"
)
rSN <- lapply(rSourceNames, source, verbose = FALSE)
## sourceCPP required C++ files
cppSourceNames <- c("fastKF.cpp", "fastKgipMat.cpp",
"log1pexp.cpp", "sigmoid.cpp")
cppSN <- lapply(cppSourceNames, sourceCpp, verbose = FALSE)
## convert to kernel
isKernel <- TRUE
if (isKernel) {
if (!isSymmetric(sd)) {
sd <- (sd + t(sd)) / 2
}
epsilon <- 0.1
while (!is.positive.semi.definite(sd)) {
sd <- sd + epsilon * diag(nrow(sd))
}
if (!isSymmetric(st)) {
st <- (st + t(st)) / 2
}
epsilon <- 0.1
while (!is.positive.semi.definite(st)) {
st <- st + epsilon * diag(nrow(st))
}
}
Y <- t(Y)
tmp <- sd
sd <- st
st <- tmp
Y[1:3, 1:3]
## do cross-validation
kfold <- 10
numSplit <- 5
## DT-Hybrid method
savedFolds <- doCVPositiveOnly3(Y, kfold = kfold, numSplit = numSplit)
## saving results
resMetrics <- matrix(NA, nrow = kfold, ncol = 1)
colnames(resMetrics) <- c("MPR")
resMetrics <- as.data.frame(resMetrics)
finalResult <- vector("list", length = numSplit)
## alpha and beta
resAB <- matrix(NA, nrow = kfold, ncol = 4)
colnames(resAB) <- c("optAlpha1", "optAlpha2", "optBeta1", "optBeta2")
resAB <- as.data.frame(resAB)
finalAB <- vector("list", length = numSplit)
## main loop
for (i in 1:numSplit) {
for (j in 1:kfold) {
cat("numSplit:", i, "/", numSplit, ";", "kfold:", j,
"/", kfold, "\n")
flush.console()
## training set with the test set links removed
Yfold <- savedFolds[[i]][[j]][[6]]
KgipD <- fastKgipMat(Yfold, 1)
KgipT <- fastKgipMat(t(Yfold), 1)
## extract test set
testSet <- savedFolds[[i]][[j]][[1]]
knownDrugIndex <- savedFolds[[i]][[j]][[4]]
knownTargetIndex <- savedFolds[[i]][[j]][[5]]
testIndexRow <- savedFolds[[i]][[j]][[2]]
testIndexCol <- savedFolds[[i]][[j]][[3]]
lmd <- 1
sgm <- 0.25
maxiter <- 20
## kronrlsMKL
MKL <- kronRlsMKL(
K1 = list(sd = sd, KgipD = KgipD),
K2 = list(st = st, KgipT = KgipT),
Yfold = Yfold,
lmd = lmd,
sgm = sgm,
maxiter = maxiter
)
Ypred <- MKL$Yhat
resAB[j, 1:2] <- MKL$alph
resAB[j, 3:4] <- MKL$bta
## result
result2 <- evalMetrics(Ypred = Ypred, testSet = testSet)
resMetrics[j, ] <- result2
}
finalResult[[i]] <- resMetrics
finalAB[[i]] <- resAB
}
# combine result
resCom <- as.data.frame(data.table::rbindlist(finalResult))
resMean <- colMeans(resCom)
se <- sqrt(var(resCom[, 1]) / length(resCom[, 1]))
cat("kronRLS-MKL:", "MPR =", round(resMean, 3), "+\\-", round(se, 3),  "\n")
flush.console()
setwd("/Users/admin/Tools/DTI/chemogenomicAlg4DTIpred-master/KronRLSMKL/")
rm(list = ls())
## current data set name
db <- "en"
switch (db,
en = {
cat("en data\n")
flush.console()
sd <- read.table("e_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("e_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("e_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
ic = {
cat("ic data\n")
flush.console()
sd <- read.table("ic_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("ic_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("ic_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
gpcr = {
cat("gpcr data\n")
flush.console()
sd <- read.table("gpcr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("gpcr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("gpcr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
nr = {
cat("nr data\n")
flush.console()
sd <- read.table("nr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("nr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("nr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
stop("db should be one of the follows:
{en, ic, gpcr, nr}\n")
)
## load required packages
pkgs <- c("matrixcalc", "data.table", "Rcpp", "ROCR",
"Bolstad2", "MESS", "nloptr")
rPkgs <- lapply(pkgs, require, character.only = TRUE)
## source required R files
rSourceNames <- c(
"doCVPositiveOnly.R",
"doCVPositiveOnly3.R",
"evalMetrics.R",
"combineKernels.R",
"eigDecomp.R",
"kronRls.R",
"kronRlsC.R",
"kronRlsMKL.R",
"optWeights.R"
)
rSN <- lapply(rSourceNames, source, verbose = FALSE)
## sourceCPP required C++ files
cppSourceNames <- c("fastKF.cpp", "fastKgipMat.cpp",
"log1pexp.cpp", "sigmoid.cpp")
cppSN <- lapply(cppSourceNames, sourceCpp, verbose = TRUE)
## convert to kernel
isKernel <- TRUE
if (isKernel) {
if (!isSymmetric(sd)) {
sd <- (sd + t(sd)) / 2
}
epsilon <- 0.1
while (!is.positive.semi.definite(sd)) {
sd <- sd + epsilon * diag(nrow(sd))
}
if (!isSymmetric(st)) {
st <- (st + t(st)) / 2
}
epsilon <- 0.1
while (!is.positive.semi.definite(st)) {
st <- st + epsilon * diag(nrow(st))
}
}
Y <- t(Y)
tmp <- sd
sd <- st
st <- tmp
Y[1:3, 1:3]
## do cross-validation
kfold <- 10
numSplit <- 5
## DT-Hybrid method
savedFolds <- doCVPositiveOnly3(Y, kfold = kfold, numSplit = numSplit)
## saving results
resMetrics <- matrix(NA, nrow = kfold, ncol = 1)
colnames(resMetrics) <- c("MPR")
resMetrics <- as.data.frame(resMetrics)
finalResult <- vector("list", length = numSplit)
## alpha and beta
resAB <- matrix(NA, nrow = kfold, ncol = 4)
colnames(resAB) <- c("optAlpha1", "optAlpha2", "optBeta1", "optBeta2")
resAB <- as.data.frame(resAB)
finalAB <- vector("list", length = numSplit)
## main loop
for (i in 1:numSplit) {
for (j in 1:kfold) {
cat("numSplit:", i, "/", numSplit, ";", "kfold:", j,
"/", kfold, "\n")
flush.console()
## training set with the test set links removed
Yfold <- savedFolds[[i]][[j]][[6]]
KgipD <- fastKgipMat(Yfold, 1)
KgipT <- fastKgipMat(t(Yfold), 1)
## extract test set
testSet <- savedFolds[[i]][[j]][[1]]
knownDrugIndex <- savedFolds[[i]][[j]][[4]]
knownTargetIndex <- savedFolds[[i]][[j]][[5]]
testIndexRow <- savedFolds[[i]][[j]][[2]]
testIndexCol <- savedFolds[[i]][[j]][[3]]
lmd <- 1
sgm <- 0.25
maxiter <- 20
## kronrlsMKL
MKL <- kronRlsMKL(
K1 = list(sd = sd, KgipD = KgipD),
K2 = list(st = st, KgipT = KgipT),
Yfold = Yfold,
lmd = lmd,
sgm = sgm,
maxiter = maxiter
)
Ypred <- MKL$Yhat
resAB[j, 1:2] <- MKL$alph
resAB[j, 3:4] <- MKL$bta
## result
result2 <- evalMetrics(Ypred = Ypred, testSet = testSet)
resMetrics[j, ] <- result2
}
finalResult[[i]] <- resMetrics
finalAB[[i]] <- resAB
}
# combine result
resCom <- as.data.frame(data.table::rbindlist(finalResult))
resMean <- colMeans(resCom)
se <- sqrt(var(resCom[, 1]) / length(resCom[, 1]))
cat("kronRLS-MKL:", "MPR =", round(resMean, 3), "+\\-", round(se, 3),  "\n")
flush.console()
