resMetrics <- as.data.frame(resMetrics)
finalResult <- vector("list", length = numSplit)
# main loop
for (i in 1:numSplit) {
for (j in 1:kfold) {
cat("numSplit:", i, "/", numSplit, ";", "kfold:", j, "/", kfold, "\n")
flush.console()
## look at splitData()
Yfold <- savedFolds[[i]][[j]][["trainFold"]]
## row is drug, col is target
if (db == "en") {
theAl <- 0.4
} else if (db == "ic") {
theAl <- 0.3
} else if (db == "gpcr") {
theAl <- 0.2
} else {
theAl <- 0.4
}
Ypred <- computeRecommendation(A = Yfold, lambda = 0.5,
alpha = theAl, S = sd, S1 = st)
## look at splitData()
testSet <- savedFolds[[i]][[j]][["testIndex"]]
## result
result2 <- evalMetrics(Ypred = Ypred,testSet = testSet)
resMetrics[j, ] <- result2
}
finalResult[[i]] <- resMetrics
}
# combine result
resCom <- as.data.frame(data.table::rbindlist(finalResult))
mpr <- resCom[, "MPR"]
mprMean <- mean(mpr)
mprSe <- sqrt(var(mpr) / length(mpr))
mprMeanSig <- round(mprMean, 3)
mprSeSig <- round(mprSe, 3)
cat("DTHybrid:", "MPR =", mprMeanSig, "+\\-", mprSeSig,  "\n")
flush.console()
nr <- nrow(Y)
nc <- ncol(Y)
# save to file
curDate <- format(Sys.time(), format = "%Y%m%d")
curTime <- format(Sys.time(), format =  "%Hh%Mm%Ss")
savedFileName <- paste0(db, "_", "mpr", mprMeanSig, "+-", mprSeSig, "_", "numRmSmp", subNum, "_", "nr", nr, "nc", nc, "_", curDate, ".", curTime, ".RData")
cat("\n\n")
print(savedFileName)
save.image(file = savedFileName)
print(dim(Y))
##Neu loi lien quan den gfortran khi bien dich file *.cpp.
##Download va cai dat gfortran tai http://gcc.gnu.org/wiki/GFortranBinaries#MacOS
setwd("/Users/admin/Tools/DTI/chemogenomicAlg4DTIpred-master/nestedCV/dthybrid/")
rm(list = ls())
## current data set name
db <- "en"#en/ic/GPCR/ic/nr/
switch (db,
en = {
cat("en data\n")
flush.console()
sd <- read.table("e_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("e_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("e_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
ic = {
cat("ic data\n")
flush.console()
sd <- read.table("ic_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("ic_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("ic_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
gpcr = {
cat("gpcr data\n")
flush.console()
sd <- read.table("gpcr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("gpcr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("gpcr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
nr = {
cat("nr data\n")
flush.console()
sd <- read.table("nr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("nr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("nr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
stop("db should be one of the follows:
{en, ic, gpcr, nr}\n")
)
## load required packages
pkgs <- c("matrixcalc", "data.table", "Rcpp", "ROCR", "Bolstad2", "MESS")
rPkgs <- lapply(pkgs, require, character.only = TRUE)
## source required R files
rSourceNames <- c(
"doCVPositiveOnly.R",
"doCVPositiveOnly3.R",
"evalMetrics.R",
"Recommendation.R",
"getOptParaDTHybrid.R"
)
rSN <- lapply(rSourceNames, source, verbose = FALSE)
Y <- t(Y)
tmp <- sd
sd <- st
st <- tmp
Y[1:3, 1:3]
## do cross-validation
kfold <- 10     ## default = 10
numSplit <- 1   ## default = 5
## DT-Hybrid method
savedFolds <- doCVPositiveOnly3(Y, kfold = kfold, numSplit = numSplit)
## saving results
resMetrics <- matrix(NA, nrow = kfold, ncol = 1)
colnames(resMetrics) <- c("MPR")
resMetrics <- as.data.frame(resMetrics)
finalResult <- vector("list", length = numSplit)
# main loop
for (i in 1:numSplit) {
for (j in 1:kfold) {
cat("outer loop...", "numSplit:", i, "/", numSplit, ";", "kfold:", j, "/",
kfold, "\n")
flush.console()
Yfold <- savedFolds[[i]][[j]][[6]]
## perform nested CV for best parameter selection
bestPara <- getOptParaDTHybrid(
Yfold, innerFold = 5, numSplitInner = 1,
paraList = list(lambda = seq(0.2, 0.9, by = 0.1),
alpha = seq(0.2, 0.9, by = 0.1)),
sd,
st)
## best parameters
bestLambda <- bestPara["lambda"]
bestAlpha <- bestPara["alpha"]
testSet <- savedFolds[[i]][[j]][[1]]
Ypred <- computeRecommendation(A = Yfold, lambda = bestLambda,
alpha = bestAlpha, S = sd, S1 = st)
## result
result <- evalMetrics(Ypred = Ypred, testSet = testSet)
resMetrics[j, ] <- result[, "MPR"]
}
finalResult[[i]] <- resMetrics
}
##Neu loi lien quan den gfortran khi bien dich file *.cpp.
##Download va cai dat gfortran tai http://gcc.gnu.org/wiki/GFortranBinaries#MacOS
setwd("/Users/admin/Tools/DTI/chemogenomicAlg4DTIpred-master/Kd/BLM/")
rm(list = ls())
## current data set name
db <- "en"#en/ic/GPCR/ic/nr/kd
switch (db,
en = {
cat("en data\n")
flush.console()
sd <- read.table("e_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("e_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("e_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
ic = {
cat("ic data\n")
flush.console()
sd <- read.table("ic_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("ic_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("ic_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
gpcr = {
cat("gpcr data\n")
flush.console()
sd <- read.table("gpcr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("gpcr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("gpcr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
nr = {
cat("nr data\n")
flush.console()
sd <- read.table("nr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("nr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("nr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
kd = {
cat("kd data\n")
Y <- read.table("drug-target_interaction_affinities_Kd__Davis_et_al.2011.txt")
Y[Y <= 30] <- 1
Y[Y > 30] <- 0
Y <- as.matrix(Y)
sd <- read.table("drug-drug_similarities_2D.txt")
sd <- as.matrix(sd)
st <- read.table("target-target_similarities_WS_normalized.txt")
st <- as.matrix(st)
},
stop("db should be one of the follows:
{en, ic, gpcr, nr}\n")
)
## load required packages
pkgs <- c(
"matrixcalc",
"data.table",
"Rcpp",
"ROCR",
"Bolstad2",
"MESS",
"nloptr",
"cluster",
"kernlab"
)
rPkgs <- lapply(pkgs, require, character.only = TRUE)
## source required R files
rSourceNames <- c(
"doCVPositiveOnly.R",
"doCVPositiveOnly3.R",
"evalMetrics.R",
"getCvIndex.R",
"blm.R"
)
rSN <- lapply(rSourceNames, source, verbose = FALSE)
## sourceCPP required C++ files
cppSourceNames <- c("fastKF.cpp",
"fastKgipMat.cpp",
"log1pexp.cpp",
"sigmoid.cpp",
"fastSolve.cpp")
cppSN <- lapply(cppSourceNames, sourceCpp, verbose = FALSE)
## convert to kernel
isKernel <- TRUE
if (isKernel) {
if (!isSymmetric(sd)) {
sd <- (sd + t(sd)) / 2
}
epsilon <- 0.1
while (!is.positive.semi.definite(sd)) {
sd <- sd + epsilon * diag(nrow(sd))
}
if (!isSymmetric(st)) {
st <- (st + t(st)) / 2
}
epsilon <- 0.1
while (!is.positive.semi.definite(st)) {
st <- st + epsilon * diag(nrow(st))
}
}
dim(Y) ## 68 * 442
dim(sd) ## 68 * 68
dim(st) ##  442 * 442
idxZeroCol <- which(colSums(Y) == 0)
Y <- Y[, -idxZeroCol]
st <- st[-idxZeroCol, -idxZeroCol]
## which(colSums(Y) == 0)
idxZeroRow <- which(rowSums(Y) == 0)
Y <- Y[-idxZeroRow, ]
sd <- sd[-idxZeroRow, -idxZeroRow]
which(rowSums(Y) == 0)
which(colSums(Y) == 0)
dim(Y)  ## 65 373
dim(sd) ## 65 65
dim(st) ## 373 373
sd[1:3, 1:3]
st[1:3, 1:3]
Y[1:3, 1:3]
Y <- t(Y)
tmp <- sd
sd <- st
st <- tmp
## do cross-validation
kfold <- 10
numSplit <- 5
## DT-Hybrid method
savedFolds <- doCVPositiveOnly3(Y, kfold = kfold, numSplit = numSplit)
## saving results
resMetrics <- matrix(NA, nrow = kfold, ncol = 1)
colnames(resMetrics) <- c("MPR")
resMetrics <- as.data.frame(resMetrics)
finalResult <- vector("list", length = numSplit)
## parameters
cc <- 1
## main loop
for (i in 1:numSplit) {
for (j in 1:kfold) {
cat("numSplit:", i, "/", numSplit, ";", "kfold:", j,
"/", kfold, "\n")
flush.console()
## training set with the test set links removed
Yfold <- savedFolds[[i]][[j]][[6]]
Kd <- sd
Kt <- st
## extract test set
testSet <- savedFolds[[i]][[j]][[1]]
knownDrugIndex <- savedFolds[[i]][[j]][[4]]
knownTargetIndex <- savedFolds[[i]][[j]][[5]]
testIndexRow <- savedFolds[[i]][[j]][[2]]
testIndexCol <- savedFolds[[i]][[j]][[3]]
Ypred <- blm(Yfold = Yfold, Kd = Kd, Kt = Kt, cc = cc)
## result
result2 <- evalMetrics(Ypred = Ypred,testSet = testSet)
resMetrics[j, ] <- result2
}
finalResult[[i]] <- resMetrics
}
# combine result
resCom <- as.data.frame(data.table::rbindlist(finalResult))
resMean <- colMeans(resCom)
se <- sqrt(var(resCom[, 1]) / length(resCom[, 1]))
cat("BLM:", "MPR =", round(resMean, 3), "+\\-", round(se, 3),  "\n")
flush.console()
savedName <- paste0(db, "_BLM.RData")
save.image(savedName)
## #target > #drug
##Neu loi lien quan den gfortran khi bien dich file *.cpp.
##Download va cai dat gfortran tai http://gcc.gnu.org/wiki/GFortranBinaries#MacOS
setwd("/Users/admin/Tools/DTI/chemogenomicAlg4DTIpred-master/Kd/BLM/")
rm(list = ls())
## current data set name
db <- "en"#en/ic/GPCR/ic/nr/kd
switch (db,
en = {
cat("en data\n")
flush.console()
sd <- read.table("e_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("e_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("e_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
ic = {
cat("ic data\n")
flush.console()
sd <- read.table("ic_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("ic_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("ic_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
gpcr = {
cat("gpcr data\n")
flush.console()
sd <- read.table("gpcr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("gpcr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("gpcr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
nr = {
cat("nr data\n")
flush.console()
sd <- read.table("nr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("nr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("nr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
kd = {
cat("kd data\n")
Y <- read.table("drug-target_interaction_affinities_Kd__Davis_et_al.2011.txt")
Y[Y <= 30] <- 1
Y[Y > 30] <- 0
Y <- as.matrix(Y)
sd <- read.table("drug-drug_similarities_2D.txt")
sd <- as.matrix(sd)
st <- read.table("target-target_similarities_WS_normalized.txt")
st <- as.matrix(st)
},
stop("db should be one of the follows:
{en, ic, gpcr, nr}\n")
)
## load required packages
pkgs <- c(
"matrixcalc",
"data.table",
"Rcpp",
"ROCR",
"Bolstad2",
"MESS",
"nloptr",
"cluster",
"kernlab"
)
rPkgs <- lapply(pkgs, require, character.only = TRUE)
## source required R files
rSourceNames <- c(
"doCVPositiveOnly.R",
"doCVPositiveOnly3.R",
"evalMetrics.R",
"getCvIndex.R",
"blm.R"
)
rSN <- lapply(rSourceNames, source, verbose = FALSE)
## sourceCPP required C++ files
cppSourceNames <- c("fastKF.cpp",
"fastKgipMat.cpp",
"log1pexp.cpp",
"sigmoid.cpp",
"fastSolve.cpp")
cppSN <- lapply(cppSourceNames, sourceCpp, verbose = FALSE)
## convert to kernel
isKernel <- TRUE
if (isKernel) {
if (!isSymmetric(sd)) {
sd <- (sd + t(sd)) / 2
}
epsilon <- 0.1
while (!is.positive.semi.definite(sd)) {
sd <- sd + epsilon * diag(nrow(sd))
}
if (!isSymmetric(st)) {
st <- (st + t(st)) / 2
}
epsilon <- 0.1
while (!is.positive.semi.definite(st)) {
st <- st + epsilon * diag(nrow(st))
}
}
dim(Y) ## 68 * 442
dim(sd) ## 68 * 68
dim(st) ##  442 * 442
idxZeroCol <- which(colSums(Y) == 0)
Y <- Y[, -idxZeroCol]
st <- st[-idxZeroCol, -idxZeroCol]
## which(colSums(Y) == 0)
idxZeroRow <- which(rowSums(Y) == 0)
Y <- Y[-idxZeroRow, ]
sd <- sd[-idxZeroRow, -idxZeroRow]
which(rowSums(Y) == 0)
which(colSums(Y) == 0)
dim(Y)  ## 65 373
dim(sd) ## 65 65
dim(st) ## 373 373
sd[1:3, 1:3]
st[1:3, 1:3]
Y[1:3, 1:3]
Y <- t(Y)
tmp <- sd
sd <- st
st <- tmp
## do cross-validation
kfold <- 10
numSplit <- 5
## DT-Hybrid method
savedFolds <- doCVPositiveOnly3(Y, kfold = kfold, numSplit = numSplit)
## saving results
resMetrics <- matrix(NA, nrow = kfold, ncol = 1)
colnames(resMetrics) <- c("MPR")
resMetrics <- as.data.frame(resMetrics)
finalResult <- vector("list", length = numSplit)
## parameters
cc <- 1
## main loop
for (i in 1:numSplit) {
for (j in 1:kfold) {
cat("numSplit:", i, "/", numSplit, ";", "kfold:", j,
"/", kfold, "\n")
flush.console()
## training set with the test set links removed
Yfold <- savedFolds[[i]][[j]][[6]]
Kd <- sd
Kt <- st
## extract test set
testSet <- savedFolds[[i]][[j]][[1]]
knownDrugIndex <- savedFolds[[i]][[j]][[4]]
knownTargetIndex <- savedFolds[[i]][[j]][[5]]
testIndexRow <- savedFolds[[i]][[j]][[2]]
testIndexCol <- savedFolds[[i]][[j]][[3]]
Ypred <- blm(Yfold = Yfold, Kd = Kd, Kt = Kt, cc = cc)
## result
result2 <- evalMetrics(Ypred = Ypred,testSet = testSet)
resMetrics[j, ] <- result2
}
finalResult[[i]] <- resMetrics
}
# combine result
resCom <- as.data.frame(data.table::rbindlist(finalResult))
resMean <- colMeans(resCom)
se <- sqrt(var(resCom[, 1]) / length(resCom[, 1]))
cat("BLM:", "MPR =", round(resMean, 3), "+\\-", round(se, 3),  "\n")
flush.console()
savedName <- paste0(db, "_BLM.RData")
save.image(savedName)
## #target > #drug
install.packages("~/Tools/PM/KEA_DrugResponse-master.zip", repos = NULL, type = "win.binary")
