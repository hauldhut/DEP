matOK<-matrix(0,nrow = nrow(Y),ncol=ncol(Y))
matOK[rowOK, colOK]<-Y[rowOK, colOK]
OneIdx<-which(Y!=0)
onePos <- which(Y!= 0, arr.ind = TRUE)#Tra ve index dang row, col
ZeroIdx<-which(Y==0)
onePos <- onePos[onePos[, "row"] %in% rowOK, ]
onePos <- onePos[onePos[, "col"] %in% rowOK, ]
# NuRevOneLinks<-round(length(OneIdx)/kfold)
# NuRevZeroLinks<-round(length(ZeroIdx)/kfold)
dim(onePos)
onePos
NuOKElement<-nrow(onePos)
NuRevElement<-ceiling(NuOKElement/kfold)
# main loop
par(mfrow=c(3,3))# 4 figures arranged in 1 rows and 2 columns
library(ROCR)
testLabelAll<-c()
scoreAll<-c()
for (j in 1:kfold) {
cat("kfold:", j, "/", kfold, "\n")
RevIdx<-sample(NuOKElement, NuRevElement)
rowRevIdx<-onePos[RevIdx,1]
colRevIdx<-onePos[RevIdx,2]
#Convert array index to linear index
RevOneIdx<-(colRevIdx-1)*nrow(Y)+rowRevIdx
#RevOneIdx<-sample(OneIdx, NuRevOneLinks)
#RevZeroIdx<-sample(ZeroIdx, NuRevZeroLinks)
RevZeroIdx<-ZeroIdx
RevIdx<-c(RevOneIdx,RevZeroIdx)
Yfold<-Y
Yfold[rowRevIdx,colRevIdx]<-0
## row is drug, col is target
if (db == "en") {
theAl <- 0.4
} else if (db == "ic") {
theAl <- 0.3
} else if (db == "gpcr") {
theAl <- 0.2
} else {
theAl <- 0.4
}
Ypred <- computeRecommendation(A = Yfold, lambda = 0.5,
alpha = theAl, S = sd, S1 = st)
testLabel <- Y[RevIdx]
score <- Ypred[RevIdx]
print(length(testLabel))
pred <- prediction(score,testLabel)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=FALSE)
perf <- performance(pred,"auc")
auc<-perf@y.values[[1]]
print(auc)
testLabelAll<-c(testLabelAll,testLabel)
scoreAll<-c(scoreAll,score)
}
print(length(testLabelAll))
pred <- prediction(scoreAll,testLabelAll)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=FALSE)
FPR<-perf@x.values
TPR<-perf@y.values
perf <- performance(pred,"auc")
auc<-perf@y.values[[1]]
print(auc)
perf <- performance(pred,"prec","rec")
plot(perf,colorize=FALSE)
Recall<-perf@x.values#Recall
Precision<-perf@y.values#Precision
aupr_spline <- try(MESS::auc(Recall, Precision, type = 'spline'), silent = TRUE)
aupr_simpson <- Bolstad2::sintegral(Recall, Precision)$int
print(aupr_simpson)
##Neu loi lien quan den gfortran khi bien dich file *.cpp.
##Download va cai dat gfortran tai http://gcc.gnu.org/wiki/GFortranBinaries#MacOS
setwd("/Users/admin/Manuscripts/42 Disease-associated Enhancers/Rcode/chemogenomicAlg4DTIpred/aucAUPR/dthybrid")
rm(list = ls())
## current data set name
db <- "enh"#en/ic/GPCR/ic/nr/kd/miRWalk/TargetScan
switch (db,
miRNA = {
cat("miRNA data\n")
flush.console()
sd <- read.table("DisSimMat.txt")
sd <- as.matrix(sd)
st <- read.table("miRNASimMat.txt")
st <- as.matrix(st)
Y <- read.table("miRNADisMat.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
miRWalk = {
cat("miRWalk data\n")
flush.console()
sd <- read.table("miRWalk_DisSimMat.txt")
sd <- as.matrix(sd)
st <- read.table("miRWalk_miRNASimMat.txt")
st <- as.matrix(st)
Y <- read.table("miRWalk_miRNADisMat.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
TargetScan = {
cat("TargetScan data\n")
flush.console()
sd <- read.table("TargetScan_DisSimMat.txt")
sd <- as.matrix(sd)
st <- read.table("TargetScan_miRNASimMat.txt")
st <- as.matrix(st)
Y <- read.table("TargetScan_miRNADisMat.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
en = {
cat("en data\n")
flush.console()
sd <- read.table("e_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("e_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("e_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
ic = {
cat("ic data\n")
flush.console()
sd <- read.table("ic_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("ic_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("ic_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
gpcr = {
cat("gpcr data\n")
flush.console()
sd <- read.table("gpcr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("gpcr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("gpcr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
nr = {
cat("nr data\n")
flush.console()
sd <- read.table("nr_simmat_dc.txt")
sd <- as.matrix(sd)
st <- read.table("nr_simmat_dg.txt")
st <- as.matrix(st)
Y <- read.table("nr_admat_dgc.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
kd = {
cat("kd data\n")
Y <- read.table("drug-target_interaction_affinities_Kd__Davis_et_al.2011.txt")
Y[Y <= 30] <- 1
Y[Y > 30] <- 0
Y <- as.matrix(Y)
sd <- read.table("drug-drug_similarities_2D.txt")
sd <- as.matrix(sd)
st <- read.table("target-target_similarities_WS_normalized.txt")
st <- as.matrix(st)
},
dr = {
cat("dr data\n")
flush.console()
sd <- read.table("DrugSim-Fdataset.txt")
sd <- as.matrix(sd)
st <- read.table("DiseaseSim-Fdataset.txt")
st <- as.matrix(st)
Y <- read.table("DiDrA-Fdataset.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
enh = {
cat("enh data\n")
flush.console()
sd <- read.table("/Users/admin/Data/Enhancer/DiseaseEnhancer/Mat_SeqBased/DOIDSimMat.txt")
sd <- as.matrix(sd)
st <- read.table("/Users/admin/Data/Enhancer/DiseaseEnhancer/Mat_SeqBased/EnhSimMat.txt")
st <- as.matrix(st)
Y <- read.table("/Users/admin/Data/Enhancer/DiseaseEnhancer/Mat_SeqBased/EnhDOIDMat.txt")
Y <- as.matrix(Y)
Y <- t(Y)
},
stop("db should be one of the follows:
{en, ic, gpcr, nr}\n")
)
dim(sd)
dim(st)
dim(Y)
if (db == "kd") {
dim(Y) ## 68 * 442
dim(sd) ## 68 * 68
dim(st) ##  442 * 442
idxZeroCol <- which(colSums(Y) == 0)
Y <- Y[, -idxZeroCol]
st <- st[-idxZeroCol, -idxZeroCol]
## which(colSums(Y) == 0)
idxZeroRow <- which(rowSums(Y) == 0)
Y <- Y[-idxZeroRow, ]
sd <- sd[-idxZeroRow, -idxZeroRow]
which(rowSums(Y) == 0)
which(colSums(Y) == 0)
dim(Y)  ## 65 373
dim(sd) ## 65 65
dim(st) ## 373 373
sd[1:3, 1:3]
st[1:3, 1:3]
Y[1:3, 1:3]
}
## load required packages
pkgs <- c("matrixcalc", "data.table", "Rcpp", "ROCR", "Bolstad2", "MESS")
rPkgs <- lapply(pkgs, require, character.only = TRUE)
## source required R files
rSourceNames <- c(
"doCVPositiveOnly.R",
"doCVPositiveOnly3.R",
"doCrossVal.R",
"calAUPR.R",
"evalMetrics.R",
"Recommendation.R"
)
rSN <- lapply(rSourceNames, source, verbose = FALSE)
Y <- t(Y)
tmp <- sd
sd <- st
st <- tmp
Y[1:3, 1:3]
## do cross-validation
kfold <- 5
numSplit <- 1
## DT-Hybrid method
#savedFolds <- doCrossVal(Y, nfold = kfold, nsplit = numSplit)
nlinks=2
rowOK<-which(rowSums(Y)>=nlinks)
colOK<-which(colSums(Y)>=nlinks)
matOK<-matrix(0,nrow = nrow(Y),ncol=ncol(Y))
matOK[rowOK, colOK]<-Y[rowOK, colOK]
OneIdx<-which(Y!=0)
onePos <- which(Y!= 0, arr.ind = TRUE)#Tra ve index dang row, col
ZeroIdx<-which(Y==0)
onePos <- onePos[onePos[, "row"] %in% rowOK, ]
onePos <- onePos[onePos[, "col"] %in% rowOK, ]
# NuRevOneLinks<-round(length(OneIdx)/kfold)
# NuRevZeroLinks<-round(length(ZeroIdx)/kfold)
dim(onePos)
onePos
NuOKElement<-nrow(onePos)
NuRevElement<-ceiling(NuOKElement/kfold)
# main loop
par(mfrow=c(3,3))# 4 figures arranged in 1 rows and 2 columns
library(ROCR)
testLabelAll<-c()
scoreAll<-c()
for (j in 1:kfold) {
cat("kfold:", j, "/", kfold, "\n")
RevIdx<-sample(NuOKElement, NuRevElement)
rowRevIdx<-onePos[RevIdx,1]
colRevIdx<-onePos[RevIdx,2]
#Convert array index to linear index
RevOneIdx<-(colRevIdx-1)*nrow(Y)+rowRevIdx
#RevOneIdx<-sample(OneIdx, NuRevOneLinks)
#RevZeroIdx<-sample(ZeroIdx, NuRevZeroLinks)
RevZeroIdx<-ZeroIdx
RevIdx<-c(RevOneIdx,RevZeroIdx)
Yfold<-Y
Yfold[rowRevIdx,colRevIdx]<-0
## row is drug, col is target
if (db == "en") {
theAl <- 0.4
} else if (db == "ic") {
theAl <- 0.3
} else if (db == "gpcr") {
theAl <- 0.2
} else {
theAl <- 0.4
}
Ypred <- computeRecommendation(A = Yfold, lambda = 0.5,
alpha = theAl, S = sd, S1 = st)
testLabel <- Y[RevIdx]
score <- Ypred[RevIdx]
print(length(testLabel))
pred <- prediction(score,testLabel)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=FALSE)
perf <- performance(pred,"auc")
auc<-perf@y.values[[1]]
print(auc)
testLabelAll<-c(testLabelAll,testLabel)
scoreAll<-c(scoreAll,score)
}
print(length(testLabelAll))
pred <- prediction(scoreAll,testLabelAll)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=FALSE)
FPR<-perf@x.values
TPR<-perf@y.values
perf <- performance(pred,"auc")
auc<-perf@y.values[[1]]
print(auc)
perf <- performance(pred,"prec","rec")
plot(perf,colorize=FALSE)
Recall<-perf@x.values#Recall
Precision<-perf@y.values#Precision
aupr_spline <- try(MESS::auc(Recall, Precision, type = 'spline'), silent = TRUE)
aupr_simpson <- Bolstad2::sintegral(Recall, Precision)$int
print(aupr_simpson)
Y[rowRevIdx,colRevIdx]
Y[RevOneIdx]
RevOneIdx<-(colRevIdx-1)*nrow(Y)+rowRevIdx
RevOneIdx
length(rowRevIdx)
length(colRevIdx)
NuRevElement
NuOKElement
library(netpredictor)
library(igraph)
#net.perf<- function(A,S1,S2,restart=0.8,alpha=0.5,lamda=0.5,relinks=100,numT=2,norm="laplace",Calgo = c("rwr","nbi","netcombo","all")){
sd <- read.table("/Users/admin/Data/Enhancer/DiseaseEnhancer/Mat_SeqBased/DOIDSimMat.txt")
sd <- as.matrix(sd)
st <- read.table("/Users/admin/Data/Enhancer/DiseaseEnhancer/Mat_SeqBased/EnhSimMat.txt")
st <- as.matrix(st)
Y <- read.table("/Users/admin/Data/Enhancer/DiseaseEnhancer/Mat_SeqBased/EnhDOIDMat.txt")
Y <- as.matrix(Y)
Y <- t(Y)
A=Y
S1=sd
S2=st
alpha=0.5
restart=0.8
lamda=0.5
nfold=5
relinks=length(which(Y>0))/nfold
numT=0
norm="laplace"
Calgo = c("rwr")
auctop = numeric()
aucc = numeric()
bdr  = numeric()
efc   = numeric()
ranks = numeric()
totallinks = sum(A)
m = dim(A)[1] ## rows for targets
n = dim(A)[2] ## columns for drugs
if (!exists('S1') || !exists('S2')){
stop("You must submit s1 and s2 matrices.\n")
}
if (nrow(S1)!=m | ncol(S1) != m){
stop("Your number of targets does not match with target similarity matrix.\n")
}
if (nrow(S2)!=n | ncol(S2) != n){
stop("Your number of targets does not match with target similarity matrix.\n")
}
## Get the name of the algorithm.
algo <- "rwr"#match.arg(Calgo)
g1 <- graph.incidence(A)
eg <- get.edgelist(g1)
c <- data.frame(table(eg[,2]))#Check number of associated elements
c <- c[c$Freq>numT,]#Chi lay cac drug co number of associated elements >numT
drugnames <- unique(as.character(c$Var1))
ids <- which(eg[,2] %in% drugnames)#Chi lay cac edge (=1) co drug thoa man (...>numT)
re <- eg[sample(ids,size = relinks,replace=FALSE),]#sampling so edge = relinks to be removed (re)
if (totallinks <= relinks){
stop("Total links removed is less than equal given links to be removes. Give a sensible value.")
}
SampledGraph <- g1
for (i in 1:dim(re)[1])
{
if (are.connected(SampledGraph, re[i,1], re[i,2]))
SampledGraph <- delete.edges(SampledGraph, E(SampledGraph, P=c(re[i,1], re[i,2])))
}
g1 = SampledGraph#Remove la chuyen 1 thanh 0 --> size (num of drugs vaf num of targets khong doi)
#Check
#length(get.vertex.attribute(g1)$name)
#dim(S1)[1]+ dim(S2)[1]
Sg_t <- get.incidence(SampledGraph)
#Sg_t <- randomizeMatrix(Sg_t,null.model = "frequency",iterations = 1000)
#mat<-tMat(Sg_t,as.matrix(S1),as.matrix(S2),normalise="laplace")
drugs <- re[,2]
message(sprintf("Detected (%s) drugs & (%s) proteins with (%s) interactions...",n,m,totallinks))
message(sprintf("Running prediction for (%s) links removed using (%s) .. ",as.character(relinks),as.character(algo)))
# performances <- function(predictR,m,re){
#
#   s1<-predictR[1:m,]
#   s1<- scale(s1, center=FALSE, scale=colSums(s1,na.rm=TRUE))
#   s1[is.na(s1)] <- 0
#   test <- data.frame(re)
#   for (dis in 1:dim(s1)[2]) {
#
#     drugname = colnames(s1)[dis]
#     subfr <- test[test$X2==drugname,]
#     p1name<-as.character(subfr$X1)
#     id = which(rownames(s1) %in% p1name)
#     clabel <- rep(0,m)
#     clabel[id] <- 1
#     res = cbind(s1[,dis],clabel)
#     colnames(res)[1] <- "score"
#
#     d <- res[order(-res[,1]),]
#     ac <- auac(d[,1], d[,2])
#     au <- auc(d[,1], d[,2])
#     at <-  auc(d[,1], d[,2],top=0.1)
#     bd <- bedroc(d[,1], d[,2])
#     ef <- enrichment_factor(d[,1], d[,2],top=0.1)
#     aucc <- c(aucc, ac)
#     bdr <- c(bdr,bd)
#     efc <- c(efc,ef)
#     auctop <- c(auctop,at)
#
#   }
#
#   scores = c(list(auac = mean(aucc),auc= mean(au),auctop = mean(auctop),bdr = mean(bdr),efc = mean(efc)))
#   return (scores)
# }
if (algo == "rwr"){
#par="True"
message(sprintf("Running RWR Algorithm"))
mat = biNetwalk(g1,s1=S1,s2=S2,restart=restart,normalise=norm,verbose=T)
predictR <- mat[,colnames(mat) %in% drugs]#Tra ve gia tri predict cho cac drug ung voi edge da xoa
#scores <- performances(predictR,m,re)
s1<-predictR[1:m,]
s1<- scale(s1, center=FALSE, scale=colSums(s1,na.rm=TRUE))
s1[is.na(s1)] <- 0
test <- data.frame(re)#re chua cac edge ban dau truoc khi bi remove
library(ROCR)
testLabelAll<-c()
scoreAll<-c()
for (dis in 1:dim(s1)[2]) {#Tinh cho tung drug trong removed list
drugname = colnames(s1)[dis]
subfr <- test[test$X2==drugname,]#Chon cac edge tuong ung voi drug do (test chinh la re)
p1name<-as.character(subfr$X1)#Lay ten cac target co edge
id = which(rownames(s1) %in% p1name)#Lay id cua cac target do
clabel <- rep(0,m)#Tao lai vector label voi tat ca cac target deu =0
clabel[id] <- 1#Tru vi tri cua cac target noi voi drug hien ta (dis)
res = cbind(s1[,dis],clabel)
colnames(res)[1] <- "score"
d <- res[order(-res[,1]),]
testLabelAll<-c(testLabelAll,d[,2])
scoreAll<-c(scoreAll,d[,1])
ac <- auac(d[,1], d[,2])
au <- auc(d[,1], d[,2])
at <-  auc(d[,1], d[,2],top=0.1)
bd <- bedroc(d[,1], d[,2])
ef <- enrichment_factor(d[,1], d[,2],top=0.1)
aucc <- c(aucc, ac)
bdr <- c(bdr,bd)
efc <- c(efc,ef)
auctop <- c(auctop,at)
}
par(mfrow=c(1,2))# 2 figures arranged in 1 rows and 2 columns
pred <- prediction(scoreAll,testLabelAll)
perf <- performance(pred,"tpr","fpr")
plot(perf,colorize=FALSE)
perf@x.values
perf@y.values
perf <- performance(pred,"auc")
auc<-perf@y.values[[1]]
perf <- performance(pred,"prec","rec")
plot(perf,colorize=FALSE)
Precision <- perf@x.values
Recall<-perf@y.values
aupr_spline <- try(MESS::auc(Recall[[1]], Precision[[1]], type = 'spline'), silent = TRUE)
aupr_simpson <- Bolstad2::sintegral(Recall[[1]], Precision[[1]])$int
perf <- performance(pred,"auc")
auc<-perf@y.values[[1]]
scores = c(list(auac = mean(aucc),auc= mean(au),auctop = mean(auctop),bdr = mean(bdr),efc = mean(efc)))
#return (scores)
}else if (algo == "nbi"){
message(sprintf("Running NBI Algorithm"))
#S1 = S1[rownames(S1) %in% rownames(N_M),colnames(S1) %in% rownames(N_M)]
#S2 = S2[rownames(S2) %in% colnames(N_M),colnames(S2) %in% colnames(N_M)]
mat <- nbiNet(Sg_t, lamda=lamda, alpha=alpha, s1=as.matrix(S1), s2=as.matrix(S2),format = "matrix")
predictR <- mat[,colnames(mat) %in% drugs]
scores <- performances(predictR,m,re)
#return (scores)
}else if(algo == "netcombo"){
message(sprintf("Running NetCombo Algorithm"))
#par="True"
mat1 = biNetwalk(g1,s1=S1,s2=S2,normalise=norm,verbose=T,restart=restart)
mat2 <- nbiNet(Sg_t,lamda=lamda, alpha=alpha, s1=as.matrix(S1), s2=as.matrix(S2),format = "matrix")
mat = (mat1+mat2)/2
predictR <- mat[,colnames(mat) %in% drugs]
scores <- performances(predictR,m,re)
#return (scores)
} else if (algo == "all"){
message(sprintf("Running all the algorithms ..."))
#par="True"
mat1 <- biNetwalk(g1,s1=S1,s2=S2,normalise=norm,verbose=T)
mat2 <- nbiNet(Sg_t, lamda=0.5, alpha=0.5, s1=as.matrix(S1), s2=as.matrix(S2),format = "matrix")
mat3 <- (mat1+mat2)/2
predictR1 <- mat1[,colnames(mat1) %in% drugs]
predictR2 <- mat2[,colnames(mat2) %in% drugs]
predictR3 <- mat3[,colnames(mat3) %in% drugs]
scores1 <- performances(predictR1,m,re)
scores2 <- performances(predictR2,m,re)
scores3 <- performances(predictR3,m,re)
list1 = list(type = 'rwr',score=scores1)
list2 = list(type = 'nbi',score=scores2)
list3 = list(type = 'netcombo',score=scores3)
scoreList = list(list1,list2,list3)
#return (scoreList)
}
#}
auc
c
dim(c)
length(ids)
re
